#!/usr/bin/env python3
"""
BOM (Byte Order Mark) –∞–ª–¥–∞–∞ –∑–∞—Å–∞—Ö —Å–∫—Ä–∏–ø—Ç
Windows –¥—ç—ç—Ä encoding –∞—Å—É—É–¥–ª—ã–≥ —à–∏–π–¥—ç—Ö
"""
import os
import codecs
from pathlib import Path

def remove_bom_from_file(file_path):
    """–§–∞–π–ª–∞–∞—Å BOM —É—Å—Ç–≥–∞—Ö"""
    try:
        # UTF-8-BOM-—Ç–∞–π–≥–∞–∞—Ä —É–Ω—à–∏—Ö
        with open(file_path, 'r', encoding='utf-8-sig') as f:
            content = f.read()
        
        # UTF-8 (BOM-–≥“Ø–π) –±–∞–π–¥–ª–∞–∞—Ä –¥–∞—Ö–∏–Ω –±–∏—á–∏—Ö
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True
    except Exception as e:
        print(f"–ê–ª–¥–∞–∞ {file_path}: {e}")
        return False

def fix_all_python_files(project_root="."):
    """–ë“Ø—Ö Python —Ñ–∞–π–ª—ã–Ω BOM-–≥ –∑–∞—Å–∞—Ö"""
    print("üîß Python —Ñ–∞–π–ª—É—É–¥—ã–Ω BOM-–≥ –∑–∞—Å–∞–∂ –±–∞–π–Ω–∞...")
    
    python_files = list(Path(project_root).rglob("*.py"))
    fixed_count = 0
    error_count = 0
    
    for file_path in python_files:
        # Backup —Ö–∞–≤—Ç—Å–∞–Ω–¥ –±–∞–π–≥–∞–∞ —Ñ–∞–π–ª—É—É–¥—ã–≥ –∞–ª–≥–∞—Å–∞—Ö
        if "backup" in str(file_path).lower() or "__pycache__" in str(file_path):
            continue
            
        # BOM –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
        try:
            with open(file_path, 'rb') as f:
                first_bytes = f.read(3)
                if first_bytes == b'\xef\xbb\xbf':  # UTF-8 BOM
                    if remove_bom_from_file(file_path):
                        print(f"‚úÖ –ó–∞—Å–∞–≤: {file_path}")
                        fixed_count += 1
                    else:
                        error_count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –®–∞–ª–≥–∞—Ö –∞–ª–¥–∞–∞ {file_path}: {e}")
            error_count += 1
    
    print(f"\nüìä –î“Ø–Ω:")
    print(f"   ‚úÖ –ó–∞—Å–∞–≥–¥—Å–∞–Ω —Ñ–∞–π–ª—É—É–¥: {fixed_count}")
    print(f"   ‚ö†Ô∏è –ê–ª–¥–∞–∞—Ç–∞–π —Ñ–∞–π–ª—É—É–¥: {error_count}")
    print(f"   üìÅ –ù–∏–π—Ç —à–∞–ª–≥–∞—Å–∞–Ω: {len(python_files)}")

def create_safe_cleanup_script():
    """–ê—é—É–ª–≥“Ø–π —Ü—ç–≤—ç—Ä–ª—ç—Ö Windows batch —Å–∫—Ä–∏–ø—Ç “Ø“Ø—Å–≥—ç—Ö"""
    
    # ASCII-—ç—ç—Ä batch —Å–∫—Ä–∏–ø—Ç “Ø“Ø—Å–≥—ç—Ö
    batch_content = """@echo off
chcp 65001
echo Creating backup...
xcopy /e /i /y . ..\\tv_streaming_backup_%date:~-4%_%date:~3,2%_%date:~0,2%

echo Removing migration backups...
if exist "backups\\migration_1751423526" rmdir /s /q "backups\\migration_1751423526"
if exist "backups\\migration_1751423840" rmdir /s /q "backups\\migration_1751423840"
if exist "backups\\migration_1751423958" rmdir /s /q "backups\\migration_1751423958"
if exist "backups\\migration_1751424107" rmdir /s /q "backups\\migration_1751424107"
if exist "backups\\migration_1751424467" rmdir /s /q "backups\\migration_1751424467"
if exist "backups\\migration_1751425256" rmdir /s /q "backups\\migration_1751425256"
if exist "backups\\migration_1751425702" rmdir /s /q "backups\\migration_1751425702"

echo Removing backup files...
if exist "main.py.backup" del "main.py.backup"
if exist "main.py.corrupted" del "main.py.corrupted"
if exist "ui\\main_window.py.backup" del "ui\\main_window.py.backup"
if exist "ui\\tabs\\playout_tab.py.backup" del "ui\\tabs\\playout_tab.py.backup"
if exist "ui\\tabs\\streaming_tab_backup_20250702.py" del "ui\\tabs\\streaming_tab_backup_20250702.py"
if exist "ui\\dialogs\\servers\\servers_backup_20250628_141621.json" del "ui\\dialogs\\servers\\servers_backup_20250628_141621.json"

echo Removing test files...
if exist "test_streaming.py" del "test_streaming.py"
if exist "test_ubuntu_connection.py" del "test_ubuntu_connection.py"
if exist "integration_usage_example.py" del "integration_usage_example.py"
if exist "examples\\integration_example.py" del "examples\\integration_example.py"
if exist "ui\\tabs\\integration_example.py" del "ui\\tabs\\integration_example.py"

echo Cleaning __pycache__ directories...
for /d /r . %%d in (__pycache__) do @if exist "%%d" rmdir /s /q "%%d"

echo Done! Testing the application...
python main.py structure
pause
"""
    
    # ASCII –±–∞–π–¥–ª–∞–∞—Ä –±–∏—á–∏—Ö
    with open('cleanup_safe.bat', 'w', encoding='ascii', errors='ignore') as f:
        f.write(batch_content)
    
    print("‚úÖ –¶—ç–≤—ç—Ä–ª—ç—Ö —Å–∫—Ä–∏–ø—Ç “Ø“Ø—Å–≥—ç–ª—ç—ç: cleanup_safe.bat")
    print("   –ê–∂–∏–ª–ª—É—É–ª–∞—Ö: cleanup_safe.bat")

def analyze_streaming_files():
    """Streaming —Ñ–∞–π–ª—É—É–¥—ã–Ω –∞—à–∏–≥–ª–∞–ª—Ç—ã–≥ —à–∞–ª–≥–∞—Ö"""
    print("\nüîç Streaming —Ñ–∞–π–ª—É—É–¥—ã–Ω —à–∞–ª–≥–∞–ª—Ç:")
    
    streaming_files = [
        "streaming/final_refactored_streaming_tab.py",
        "streaming/refactored_streaming_tab.py", 
        "ui/tabs/streaming_tab.py"
    ]
    
    for file_path in streaming_files:
        if os.path.exists(file_path):
            print(f"\nüìÑ {file_path}:")
            
            # –§–∞–π–ª—ã–Ω —Ö—ç–º–∂—ç—ç
            size = os.path.getsize(file_path)
            print(f"   üìè –•—ç–º–∂—ç—ç: {size} bytes")
            
            # Import-—É—É–¥—ã–≥ –æ–ª–æ—Ö
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                # Import –º”©—Ä“Ø“Ø–¥–∏–π–≥ –æ–ª–æ—Ö
                import_lines = [line.strip() for line in content.split('\n') 
                               if line.strip().startswith(('import ', 'from '))]
                print(f"   üì¶ Import —Ç–æ–æ: {len(import_lines)}")
                
                # –ö–ª–∞—Å—Å —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç—ã–≥ –æ–ª–æ—Ö
                class_count = content.count('class ')
                print(f"   üèóÔ∏è –ö–ª–∞—Å—Å —Ç–æ–æ: {class_count}")
                
                # –§—É–Ω–∫—Ü —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ–ª—Ç—ã–≥ –æ–ª–æ—Ö  
                def_count = content.count('def ')
                print(f"   ‚öôÔ∏è –§—É–Ω–∫—Ü —Ç–æ–æ: {def_count}")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –£–Ω—à–∏—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        else:
            print(f"‚ùå –û–ª–¥—Å–æ–Ω–≥“Ø–π: {file_path}")

def main():
    print("üõ†Ô∏è BOM –∞–ª–¥–∞–∞ –∑–∞—Å–∞—Ö –±–æ–ª–æ–Ω —Ü—ç–≤—ç—Ä–ª—ç—Ö —Å–∫—Ä–∏–ø—Ç")
    print("=" * 50)
    
    # 1. BOM –∞–ª–¥–∞–∞–Ω—É—É–¥—ã–≥ –∑–∞—Å–∞—Ö
    fix_all_python_files()
    
    # 2. Streaming —Ñ–∞–π–ª—É—É–¥—ã–≥ —à–∞–ª–≥–∞—Ö
    analyze_streaming_files()
    
    # 3. –ê—é—É–ª–≥“Ø–π —Ü—ç–≤—ç—Ä–ª—ç—Ö —Å–∫—Ä–∏–ø—Ç “Ø“Ø—Å–≥—ç—Ö
    create_safe_cleanup_script()
    
    print(f"\nüéâ –ë—ç–ª—Ç–≥—ç–ª –∞–∂–∏–ª –¥—É—É—Å–∞–≤!")
    print(f"–î–∞—Ä–∞–∞–≥–∏–π–Ω –∞–ª—Ö–∞–º:")
    print(f"1. cleanup_safe.bat –∞–∂–∏–ª–ª—É—É–ª–∞—Ö")
    print(f"2. python main.py —Ç–µ—Å—Ç —Ö–∏–π—Ö")
    print(f"3. Import –∞–ª–¥–∞–∞–Ω—É—É–¥—ã–≥ –∑–∞—Å–∞—Ö")

if __name__ == "__main__":
    main()
#!/usr/bin/env python3
"""
Integration Usage Guide - Tab Integration System —Ö—ç—Ä—ç–≥–ª—ç—Ö –∑–∞–∞–≤–∞—Ä
"""

from PyQt6.QtWidgets import *
from PyQt6.QtCore import *
from PyQt6.QtGui import *

# Import integration system
try:
    from tab_integration_system import (
        setup_integration_system, 
        IntegrationConfig, 
        MongolianSystemMessages,
        EventType,
        SystemEvent
    )
    INTEGRATION_AVAILABLE = True
except ImportError:
    INTEGRATION_AVAILABLE = False
    print("‚ö†Ô∏è Integration system not available")

# =============================================================================
# MAIN WINDOW ENHANCEMENT FUNCTION
# =============================================================================

def integrate_with_existing_main_window(MainWindowClass):
    """
    –≠–Ω—ç —Ñ—É–Ω–∫—Ü –Ω—å –æ–¥–æ–æ –±–∞–π–≥–∞–∞ main window class-—ã–≥ integration system-—Ç—ç–π —Ö–æ–ª–±–æ–¥–æ–≥
    
    –•—ç—Ä—ç–≥–ª—ç—Ö –∞—Ä–≥–∞:
    ```python
    from ui.main_window import ProfessionalStreamingStudio
    from integration_usage_guide import integrate_with_existing_main_window
    
    # Enhanced version “Ø“Ø—Å–≥—ç—Ö
    EnhancedStudio = integrate_with_existing_main_window(ProfessionalStreamingStudio)
    main_win = EnhancedStudio(config_manager, app)
    ```
    """
    
    if not INTEGRATION_AVAILABLE:
        print("Integration system –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å")
        return MainWindowClass
    
    class EnhancedMainWindow(MainWindowClass):
        def __init__(self, config_manager, app):
            # –≠—Ö–ª—ç—ç–¥ –∞–Ω—Ö–Ω—ã class-—ã–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö
            super().__init__(config_manager, app)
            
            # Integration system —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
            self._setup_integration_system()
            
            # Integration menu items –Ω—ç–º—ç—Ö
            self._add_integration_menu_items()
            
            # Integration signals —Ö–æ–ª–±–æ—Ö
            self._connect_integration_signals()
        
        def _setup_integration_system(self):
            """Integration system —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö"""
            try:
                # Configuration “Ø“Ø—Å–≥—ç—Ö
                integration_config = IntegrationConfig()
                integration_config.monitoring_enabled = True
                integration_config.automation_enabled = True
                integration_config.use_localized_messages = True
                
                # Integration system —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö
                self.integration_system, self.system_monitor = setup_integration_system(
                    self, self.config_manager, integration_config
                )
                
                self.logger.info("Integration system setup successful")
                self._show_status_message(
                    MongolianSystemMessages.get_message("integration_ready"), 3000
                )
                
            except Exception as e:
                self.logger.error(f"Failed to add integration menu items: {e}")
        
        def _connect_integration_signals(self):
            """Integration signals —Ö–æ–ª–±–æ—Ö"""
            if not hasattr(self, 'integration_system'):
                return
            
            try:
                # Event bus signals —Ö–æ–ª–±–æ—Ö
                self.integration_system.event_bus.global_event.connect(self._on_integration_event)
                
                # Integration manager signals
                self.integration_system.integration_manager.global_status_update.connect(
                    self._on_status_update
                )
                self.integration_system.integration_manager.emergency_stop_triggered.connect(
                    self._on_emergency_stop_triggered
                )
                
                # Workflow engine signals
                self.integration_system.workflow_engine.workflow_started.connect(
                    self._on_workflow_started
                )
                self.integration_system.workflow_engine.workflow_completed.connect(
                    self._on_workflow_completed
                )
                
            except Exception as e:
                self.logger.error(f"Failed to connect integration signals: {e}")
        
        def _show_system_status(self):
            """System status —Ö–∞—Ä—É—É–ª–∞—Ö"""
            if not hasattr(self, 'integration_system'):
                QMessageBox.warning(self, "–ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞", "Integration system –±–æ–ª–æ–º–∂–≥“Ø–π")
                return
            
            try:
                status = self.integration_system.get_system_status()
                
                dialog = SystemStatusDialog(status, self)
                dialog.exec()
                
            except Exception as e:
                QMessageBox.critical(self, "–ê–ª–¥–∞–∞", f"System status —Ö–∞—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: {e}")
        
        def _show_workflow_dialog(self):
            """Workflow –∞–∂–∏–ª–ª—É—É–ª–∞—Ö dialog"""
            if not hasattr(self, 'integration_system'):
                QMessageBox.warning(self, "–ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞", "Integration system –±–æ–ª–æ–º–∂–≥“Ø–π")
                return
            
            try:
                workflows = list(self.integration_system.workflow_engine.workflows.keys())
                
                if not workflows:
                    QMessageBox.information(self, "–ú—ç–¥—ç—ç–ª—ç–ª", "–ë–æ–ª–æ–º–∂—Ç–æ–π workflow –∞–ª–≥–∞")
                    return
                
                dialog = WorkflowDialog(workflows, self)
                if dialog.exec() == QDialog.DialogCode.Accepted:
                    workflow_name = dialog.get_selected_workflow()
                    params = dialog.get_parameters()
                    
                    execution_id = self.integration_system.execute_workflow(workflow_name, params)
                    self._show_status_message(
                        f"üîÑ Workflow —ç—Ö—ç–ª–ª—ç—ç: {workflow_name} (ID: {execution_id})", 5000
                    )
                    
            except Exception as e:
                QMessageBox.critical(self, "–ê–ª–¥–∞–∞", f"Workflow dialog-–¥ –∞–ª–¥–∞–∞: {e}")
        
        def _emergency_stop(self):
            """Emergency stop –≥“Ø–π—Ü—ç—Ç–≥—ç—Ö"""
            if not hasattr(self, 'integration_system'):
                QMessageBox.warning(self, "–ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞", "Integration system –±–æ–ª–æ–º–∂–≥“Ø–π")
                return
            
            reply = QMessageBox.question(
                self, "Emergency Stop - –Ø–∞—Ä–∞–ª—Ç–∞–π –∑–æ–≥—Å–æ–æ–ª—Ç",
                "–¢–∞ –±“Ø—Ö “Ø–π–ª –∞–∂–∏–ª–ª–∞–≥–∞–∞–≥ —è–∞—Ä–∞–ª—Ç–∞–π –∑–æ–≥—Å–æ–æ—Ö–¥–æ–æ –∏—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞ —É—É?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if reply == QMessageBox.StandardButton.Yes:
                try:
                    self.integration_system.trigger_emergency_stop(
                        "Manual emergency stop from main window"
                    )
                    self._show_status_message("üõë –Ø–∞—Ä–∞–ª—Ç–∞–π –∑–æ–≥—Å–æ–æ–ª—Ç –∏–¥—ç–≤—Ö–∂–ª—ç—ç", 5000)
                except Exception as e:
                    QMessageBox.critical(self, "–ê–ª–¥–∞–∞", f"Emergency stop –∞–ª–¥–∞–∞: {e}")
        
        def _test_integration(self):
            """Integration —Ç–µ—Å—Ç–ª—ç—Ö"""
            if not hasattr(self, 'integration_system'):
                QMessageBox.warning(self, "–ê–Ω—Ö–∞–∞—Ä—É—É–ª–≥–∞", "Integration system –±–æ–ª–æ–º–∂–≥“Ø–π")
                return
            
            try:
                # Test event –∏–ª–≥—ç—ç—Ö
                test_event = SystemEvent(
                    event_type=EventType.SYSTEM_EVENT,
                    source_tab="main_window",
                    data={"test": True, "message": "Integration test event"}
                )
                
                self.integration_system.event_bus.emit_event(test_event)
                
                # Status –∞–≤–∞—Ö
                status = self.integration_system.get_system_status()
                
                # Result —Ö–∞—Ä—É—É–ª–∞—Ö
                result_text = f"""
üß™ Integration Test Results:

üìä Registered Tabs: {len(status['tabs'])}
üìà Event History: {status['event_bus']['event_history_count']}
üîÑ Available Workflows: {len(status['workflows']['registered'])}
üì° Active Streams: {status['shared_data']['active_streams']}
üé¨ Playout Live: {status['shared_data']['playout_live']}

‚úÖ Integration system –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞!
                """
                
                QMessageBox.information(self, "Integration Test", result_text)
                
            except Exception as e:
                QMessageBox.critical(self, "Test –∞–ª–¥–∞–∞", f"Integration test failed: {e}")
        
        # Event handlers
        def _on_integration_event(self, event):
            """Integration event —à–∏–π–¥—ç—Ö"""
            try:
                # UI update —Ö–∏–π—Ö event-—ã–Ω –¥–∞–≥—É—É
                if event.event_type == EventType.STREAM_STARTED:
                    self.connection_status.setText("üî¥ Streaming")
                    self._show_status_message(
                        MongolianSystemMessages.get_message(
                            "stream_started", 
                            stream_key=event.data.get("stream_key", "")
                        ), 3000
                    )
                
                elif event.event_type == EventType.STREAM_STOPPED:
                    self.connection_status.setText("üü° Connected")
                    self._show_status_message(
                        MongolianSystemMessages.get_message(
                            "stream_stopped", 
                            stream_key=event.data.get("stream_key", "")
                        ), 3000
                    )
                
                elif event.event_type == EventType.PLAYOUT_TAKE:
                    self._show_status_message(
                        MongolianSystemMessages.get_message("playout_live"), 3000
                    )
                
                elif event.event_type == EventType.MEDIA_LOADED:
                    self._show_status_message(
                        MongolianSystemMessages.get_message(
                            "media_loaded", 
                            filename=event.data.get("title", "")
                        ), 3000
                    )
                
                # Log –±–æ–ª–≥–æ–Ω event-—ã–≥ logs tab-–¥ –±–∏—á–∏—Ö
                if hasattr(self, 'log_display'):
                    timestamp = event.timestamp.strftime("%H:%M:%S")
                    log_entry = f"[{timestamp}] {event.event_type.value}: {event.source_tab} -> {event.target_tab or 'ALL'}"
                    self.log_display.append(log_entry)
                    
                    # Auto-scroll
                    scrollbar = self.log_display.verticalScrollBar()
                    scrollbar.setValue(scrollbar.maximum())
                
            except Exception as e:
                self.logger.error(f"Error handling integration event: {e}")
        
        def _on_status_update(self, status):
            """Global status update —à–∏–π–¥—ç—Ö"""
            try:
                # UI elements —à–∏–Ω—ç—á–ª—ç—Ö
                tab_count = len(status.get('tabs', {}))
                active_streams = status.get('active_streams', 0)
                
                # Status bar —à–∏–Ω—ç—á–ª—ç—Ö
                status_text = f"Tabs: {tab_count} | Streams: {active_streams}"
                if hasattr(self, 'status_bar'):
                    # Permanent widget –±–∞–π—Ö–≥“Ø–π –±–æ–ª –Ω—ç–º—ç—Ö
                    if not hasattr(self, 'integration_status_label'):
                        self.integration_status_label = QLabel(status_text)
                        self.status_bar.addPermanentWidget(self.integration_status_label)
                    else:
                        self.integration_status_label.setText(status_text)
                
            except Exception as e:
                self.logger.error(f"Error updating status: {e}")
        
        def _on_emergency_stop_triggered(self):
            """Emergency stop triggered —à–∏–π–¥—ç—Ö"""
            self._show_status_message(
                MongolianSystemMessages.get_message("emergency_stop"), 10000
            )
            
            # UI-–¥ emergency state —Ö–∞—Ä—É—É–ª–∞—Ö
            if hasattr(self, 'connection_status'):
                self.connection_status.setText("üõë Emergency Stop")
                self.connection_status.setStyleSheet("color: red; font-weight: bold;")
        
        def _on_workflow_started(self, execution_id):
            """Workflow —ç—Ö—ç–ª—Å—ç–Ω “Ø–µ–¥"""
            self._show_status_message(f"üîÑ Workflow —ç—Ö—ç–ª–ª—ç—ç: {execution_id}", 3000)
        
        def _on_workflow_completed(self, execution_id, success):
            """Workflow –¥—É—É—Å—Å–∞–Ω “Ø–µ–¥"""
            if success:
                self._show_status_message(f"‚úÖ Workflow –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥—É—É—Å–ª–∞–∞: {execution_id}", 5000)
            else:
                self._show_status_message(f"‚ùå Workflow –∞–º–∂–∏–ª—Ç–≥“Ø–π: {execution_id}", 5000)
        
        # Integration-specific methods –Ω—ç–º—ç—Ö
        def execute_media_to_air_workflow(self, file_path: str):
            """Media to air workflow –∞–∂–∏–ª–ª—É—É–ª–∞—Ö"""
            if hasattr(self, 'integration_system'):
                return self.integration_system.execute_workflow("media_to_air", {"file_path": file_path})
            return None
        
        def broadcast_custom_event(self, event_type, data):
            """Custom event –∏–ª–≥—ç—ç—Ö"""
            if hasattr(self, 'integration_system'):
                self.integration_system.integration_manager.broadcast_event(event_type, data, "main_window")
        
        def get_integration_status(self):
            """Integration status –∞–≤–∞—Ö"""
            if hasattr(self, 'integration_system'):
                return self.integration_system.get_system_status()
            return None
    
    return EnhancedMainWindow

# =============================================================================
# DIALOGS FOR INTEGRATION
# =============================================================================

class SystemStatusDialog(QDialog):
    """System status —Ö–∞—Ä—É—É–ª–∞—Ö dialog"""
    
    def __init__(self, status_data, parent=None):
        super().__init__(parent)
        self.status_data = status_data
        self.setWindowTitle("System Status - –°–∏—Å—Ç–µ–º–∏–π–Ω —Ç”©–ª”©–≤")
        self.setModal(True)
        self.resize(700, 600)
        
        self._setup_ui()
    
    def _setup_ui(self):
        layout = QVBoxLayout(self)
        
        # Header
        header = QLabel("üìä Professional Streaming Studio - System Status")
        header.setStyleSheet("font-size: 16px; font-weight: bold; margin: 10px;")
        header.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(header)
        
        # Tabs
        tab_widget = QTabWidget()
        
        # Overview tab
        overview_tab = self._create_overview_tab()
        tab_widget.addTab(overview_tab, "üè† Overview")
        
        # Tabs status
        tabs_tab = self._create_tabs_tab()
        tab_widget.addTab(tabs_tab, "üìë Tabs")
        
        # Event history
        events_tab = self._create_events_tab()
        tab_widget.addTab(events_tab, "üìã Events")
        
        # Raw data
        raw_tab = self._create_raw_tab()
        tab_widget.addTab(raw_tab, "üîß Raw Data")
        
        layout.addWidget(tab_widget)
        
        # Close button
        close_btn = QPushButton("–•–∞–∞—Ö")
        close_btn.clicked.connect(self.close)
        layout.addWidget(close_btn)
    
    def _create_overview_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        # Summary info
        summary = f"""
<h3>üìä System Overview</h3>
<table style="width:100%; border-collapse: collapse;">
<tr style="background-color: #f0f0f0;"><td><b>Registered Tabs:</b></td><td>{len(self.status_data.get('tabs', {}))}</td></tr>
<tr><td><b>Active Streams:</b></td><td>{self.status_data.get('active_streams', 0)}</td></tr>
<tr style="background-color: #f0f0f0;"><td><b>Current Media:</b></td><td>{'‚úÖ Loaded' if self.status_data.get('current_media', False) else '‚ùå None'}</td></tr>
<tr><td><b>Playout Live:</b></td><td>{'üî¥ Live' if self.status_data.get('playout_live', False) else '‚ö´ Offline'}</td></tr>
<tr style="background-color: #f0f0f0;"><td><b>Auto Scheduler:</b></td><td>{'‚úÖ Enabled' if self.status_data.get('auto_scheduler', False) else '‚ùå Disabled'}</td></tr>
<tr><td><b>Emergency Stop:</b></td><td>{'üõë Active' if self.status_data.get('emergency_stop', False) else '‚úÖ Normal'}</td></tr>
<tr style="background-color: #f0f0f0;"><td><b>Event History:</b></td><td>{self.status_data.get('event_bus', {}).get('event_history_count', 0)} events</td></tr>
<tr><td><b>Running Workflows:</b></td><td>{self.status_data.get('workflows', {}).get('running', 0)}</td></tr>
</table>
        """
        
        summary_label = QLabel(summary)
        summary_label.setWordWrap(True)
        layout.addWidget(summary_label)
        
        layout.addStretch()
        return widget
    
    def _create_tabs_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        tabs_text = "<h3>üìë Tab Status</h3><br>"
        
        for tab_name, tab_status in self.status_data.get('tabs', {}).items():
            status_icon = "‚úÖ" if tab_status.get('initialized', False) else "‚ùå"
            active_icon = "üü¢" if tab_status.get('active', False) else "‚ö´"
            
            tabs_text += f"""
<b>{status_icon} {tab_name}</b> {active_icon}<br>
&nbsp;&nbsp;Initialized: {tab_status.get('initialized', False)}<br>
&nbsp;&nbsp;Active: {tab_status.get('active', False)}<br>
&nbsp;&nbsp;Last Activity: {tab_status.get('last_activity', 'Unknown')}<br><br>
            """
        
        tabs_label = QLabel(tabs_text)
        tabs_label.setWordWrap(True)
        layout.addWidget(tabs_label)
        
        layout.addStretch()
        return widget
    
    def _create_events_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        events_label = QLabel("<h3>üìã Recent Events</h3>")
        layout.addWidget(events_label)
        
        # Events would be shown here if available
        events_text = QTextEdit()
        events_text.setReadOnly(True)
        events_text.setPlainText("Event history —Ö–∞—Ä–∞–ª—Ç –¥—ç–º–∂–∏–≥–¥—ç—ç–≥“Ø–π.\n–î—ç–ª–≥—ç—Ä—ç–Ω–≥“Ø–π –º—ç–¥—ç—ç–ª—ç–ª raw data tab-–∞–∞—Å “Ø–∑–Ω—ç “Ø“Ø.")
        layout.addWidget(events_text)
        
        return widget
    
    def _create_raw_tab(self):
        widget = QWidget()
        layout = QVBoxLayout(widget)
        
        raw_label = QLabel("<h3>üîß Raw System Data</h3>")
        layout.addWidget(raw_label)
        
        raw_text = QTextEdit()
        raw_text.setReadOnly(True)
        raw_text.setFont(QFont("Consolas", 9))
        raw_text.setPlainText(json.dumps(self.status_data, indent=2, ensure_ascii=False))
        layout.addWidget(raw_text)
        
        return widget

class WorkflowDialog(QDialog):
    """Workflow —Å–æ–Ω–≥–æ—Ö –±–∞ –∞–∂–∏–ª–ª—É—É–ª–∞—Ö dialog"""
    
    def __init__(self, workflows, parent=None):
        super().__init__(parent)
        self.workflows = workflows
        self.setWindowTitle("Execute Workflow - Workflow –∞–∂–∏–ª–ª—É—É–ª–∞—Ö")
        self.setModal(True)
        self.resize(500, 400)
        
        self._setup_ui()
    
    def _setup_ui(self):
        layout = QVBoxLayout(self)
        
        # Header
        header = QLabel("üîÑ Select Workflow to Execute")
        header.setStyleSheet("font-size: 14px; font-weight: bold; margin: 10px;")
        layout.addWidget(header)
        
        # Workflow selection
        self.workflow_combo = QComboBox()
        self.workflow_combo.addItems(self.workflows)
        self.workflow_combo.currentTextChanged.connect(self._on_workflow_changed)
        layout.addWidget(QLabel("Workflow:"))
        layout.addWidget(self.workflow_combo)
        
        # Parameters
        self.params_group = QGroupBox("Parameters")
        self.params_layout = QFormLayout(self.params_group)
        layout.addWidget(self.params_group)
        
        # Common parameters for workflows
        self.file_path_edit = QLineEdit()
        self.file_path_browse = QPushButton("üìÅ Browse")
        self.file_path_browse.clicked.connect(self._browse_file)
        
        file_layout = QHBoxLayout()
        file_layout.addWidget(self.file_path_edit)
        file_layout.addWidget(self.file_path_browse)
        
        self.params_layout.addRow("File Path:", file_layout)
        
        # Additional params
        self.additional_params = QTextEdit()
        self.additional_params.setPlaceholderText('{"key": "value"}')
        self.additional_params.setMaximumHeight(100)
        self.params_layout.addRow("Additional Params (JSON):", self.additional_params)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        execute_btn = QPushButton("‚ñ∂Ô∏è Execute")
        execute_btn.clicked.connect(self.accept)
        button_layout.addWidget(execute_btn)
        
        cancel_btn = QPushButton("‚ùå Cancel")
        cancel_btn.clicked.connect(self.reject)
        button_layout.addWidget(cancel_btn)
        
        layout.addLayout(button_layout)
        
        # Initialize
        self._on_workflow_changed(self.workflows[0] if self.workflows else "")
    
    def _on_workflow_changed(self, workflow_name):
        """Workflow ”©”©—Ä—á–ª”©–≥–¥”©—Ö”©–¥ parameters —à–∏–Ω—ç—á–ª—ç—Ö"""
        # Show/hide parameters based on workflow
        if workflow_name == "media_to_air":
            self.file_path_edit.setVisible(True)
            self.file_path_browse.setVisible(True)
            self.params_group.setTitle("Media to Air Parameters")
        else:
            self.file_path_edit.setVisible(False)
            self.file_path_browse.setVisible(False)
            self.params_group.setTitle("Workflow Parameters")
    
    def _browse_file(self):
        """File —Å–æ–Ω–≥–æ—Ö"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Select Media File", "", 
            "Media Files (*.mp4 *.avi *.mov *.mkv);;All Files (*)"
        )
        if file_path:
            self.file_path_edit.setText(file_path)
    
    def get_selected_workflow(self):
        """–°–æ–Ω–≥–æ—Å–æ–Ω workflow –±—É—Ü–∞–∞—Ö"""
        return self.workflow_combo.currentText()
    
    def get_parameters(self):
        """Parameters –∞–≤–∞—Ö"""
        params = {}
        
        # File path parameter
        if self.file_path_edit.text().strip():
            params["file_path"] = self.file_path_edit.text().strip()
        
        # Additional parameters
        additional_text = self.additional_params.toPlainText().strip()
        if additional_text:
            try:
                additional_params = json.loads(additional_text)
                params.update(additional_params)
            except json.JSONDecodeError:
                # Ignore invalid JSON
                pass
        
        return params

# =============================================================================
# PRACTICAL USAGE EXAMPLES
# =============================================================================

class IntegrationExamples:
    """Integration system —Ö—ç—Ä—ç–≥–ª—ç—Ö –∂–∏—à—ç—ç–Ω“Ø“Ø–¥"""
    
    @staticmethod
    def example_media_to_air(main_window, file_path: str):
        """Media to air workflow –∂–∏—à—ç—ç"""
        if hasattr(main_window, 'integration_system'):
            execution_id = main_window.integration_system.execute_workflow(
                "media_to_air", {"file_path": file_path}
            )
            print(f"üé¨ Media to air workflow started: {execution_id}")
            return execution_id
        else:
            print("‚ùå Integration system not available")
            return None
    
    @staticmethod
    def example_emergency_stop(main_window):
        """Emergency stop –∂–∏—à—ç—ç"""
        if hasattr(main_window, 'integration_system'):
            main_window.integration_system.trigger_emergency_stop("Example emergency stop")
            print("üõë Emergency stop triggered")
        else:
            print("‚ùå Integration system not available")
    
    @staticmethod
    def example_custom_event(main_window):
        """Custom event –∏–ª–≥—ç—ç—Ö –∂–∏—à—ç—ç"""
        if hasattr(main_window, 'integration_system'):
            main_window.broadcast_custom_event(
                EventType.SYSTEM_EVENT,
                {"message": "Custom event from example", "timestamp": datetime.now().isoformat()}
            )
            print("üì° Custom event broadcasted")
        else:
            print("‚ùå Integration system not available")
    
    @staticmethod
    def example_get_status(main_window):
        """System status –∞–≤–∞—Ö –∂–∏—à—ç—ç"""
        if hasattr(main_window, 'integration_system'):
            status = main_window.get_integration_status()
            print("üìä System Status:")
            print(json.dumps(status, indent=2, ensure_ascii=False))
            return status
        else:
            print("‚ùå Integration system not available")
            return None

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================

def print_setup_instructions():
    """Setup –∑–∞–∞–≤–∞—Ä —Ö—ç–≤–ª—ç—Ö"""
    print("""
üéØ TAB INTEGRATION SYSTEM SETUP –ó–ê–ê–í–ê–†

1Ô∏è‚É£ –§–ê–ô–õ–£–£–î –ë–ê–ô–†–õ–£–£–õ–ê–•:
   üìÅ tab_integration_system.py - “Ø–Ω–¥—Å—ç–Ω —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ñ–∞–π–ª
   üìÅ integration_usage_guide.py - —ç–Ω—ç –∑–∞–∞–≤–∞—Ä —Ñ–∞–π–ª
   
2Ô∏è‚É£ MAIN.PY –§–ê–ô–õ–î –ù–≠–ú–≠–•:
   ```python
   # main.py –¥–æ—Ç–æ—Ä imports —Ö—ç—Å—ç–≥—Ç:
   try:
       from integration_usage_guide import integrate_with_existing_main_window
       INTEGRATION_AVAILABLE = True
   except ImportError:
       INTEGRATION_AVAILABLE = False
   
   # main() —Ñ—É–Ω–∫—Ü –¥–æ—Ç–æ—Ä main window “Ø“Ø—Å–≥—ç—Ö —Ö—ç—Å—ç–≥—Ç:
   if INTEGRATION_AVAILABLE:
       try:
           EnhancedStudio = integrate_with_existing_main_window(ProfessionalStreamingStudio)
           main_win = EnhancedStudio(config_manager, app)
           print("üéâ Integration system –∏–¥—ç–≤—Ö–∂–ª—ç—ç!")
       except Exception as e:
           print(f"Integration failed, using fallback: {e}")
           main_win = ProfessionalStreamingStudio(config_manager, app)
   else:
       main_win = ProfessionalStreamingStudio(config_manager, app)
   ```

3Ô∏è‚É£ –•–≠–†–≠–ì–õ–≠–•:
   ‚ñ∂Ô∏è Tools > System Status - —Å–∏—Å—Ç–µ–º–∏–π–Ω —Ç”©–ª”©–≤ —Ö–∞—Ä–∞—Ö
   ‚ñ∂Ô∏è Tools > Execute Workflow - workflow –∞–∂–∏–ª–ª—É—É–ª–∞—Ö  
   ‚ñ∂Ô∏è Tools > Emergency Stop (Ctrl+Alt+E) - —è–∞—Ä–∞–ª—Ç–∞–π –∑–æ–≥—Å–æ–æ–ª—Ç
   ‚ñ∂Ô∏è Tools > Test Integration - integration —Ç–µ—Å—Ç–ª—ç—Ö

4Ô∏è‚É£ PROGRAMMATIC –•–≠–†–≠–ì–õ–≠–•:
   ```python
   # Workflow –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
   main_win.execute_media_to_air_workflow("/path/to/video.mp4")
   
   # Emergency stop
   main_win.trigger_emergency_stop("Manual stop")
   
   # Status –∞–≤–∞—Ö
   status = main_win.get_integration_status()
   
   # Custom event –∏–ª–≥—ç—ç—Ö
   main_win.broadcast_custom_event(EventType.MEDIA_SELECTED, {"file": "test.mp4"})
   ```

‚úÖ INTEGRATION –ò–î–≠–í–•–ñ–°–≠–ù–ò–ô –î–ê–†–ê–ê:
   üîÑ –¢–∞–±—É—É–¥ —Ö–æ–æ—Ä–æ–Ω–¥—ã–Ω –∞–≤—Ç–æ–º–∞—Ç —Ö–∞—Ä–∏–ª—Ü–∞–∞ —Ö–æ–ª–±–æ–æ
   üìä –ë–æ–¥–∏—Ç —Ü–∞–≥–∏–π–Ω —Å–∏—Å—Ç–µ–º–∏–π–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   üé¨ Media to air –∞–≤—Ç–æ–º–∞—Ç workflow
   üõë Emergency stop –±“Ø—Ö —Ç–∞–±—É—É–¥–∞–¥
   üì° Event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
   üá≤üá≥ –ú–æ–Ω–≥–æ–ª —Ö—ç–ª–Ω–∏–π –¥—ç–º–∂–ª—ç–≥

‚ö†Ô∏è –ê–ù–•–ê–ê–†: Integration system –Ω—å optional - –±–∞–π—Ö–≥“Ø–π –±–∞–π–≤–∞–ª –∞–Ω—Ö–Ω—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–∂–∏–ª–ª–∞–Ω–∞.
    """)

# =============================================================================
# EXPORT
# =============================================================================

__all__ = [
    'integrate_with_existing_main_window',
    'SystemStatusDialog',
    'WorkflowDialog', 
    'IntegrationExamples',
    'print_setup_instructions'
]

if __name__ == "__main__":
    print_setup_instructions()
                self.logger.error(f"Integration setup failed: {e}")
                self._show_status_message(f"Integration system –∞–ª–¥–∞–∞: {e}", 5000)
        
        def _add_integration_menu_items(self):
            """Integration-—ã–Ω menu items –Ω—ç–º—ç—Ö"""
            if not hasattr(self, 'integration_system'):
                return
            
            try:
                # Tools menu –æ–ª–æ—Ö
                tools_menu = None
                for action in self.menuBar().actions():
                    if action.text() == "&Tools":
                        tools_menu = action.menu()
                        break
                
                if tools_menu:
                    tools_menu.addSeparator()
                    
                    # System Status
                    status_action = QAction("üìä System Status", self)
                    status_action.triggered.connect(self._show_system_status)
                    tools_menu.addAction(status_action)
                    
                    # Execute Workflow
                    workflow_action = QAction("üîÑ Execute Workflow", self)
                    workflow_action.triggered.connect(self._show_workflow_dialog)
                    tools_menu.addAction(workflow_action)
                    
                    # Emergency Stop
                    emergency_action = QAction("üõë Emergency Stop", self)
                    emergency_action.setShortcut(QKeySequence("Ctrl+Alt+E"))
                    emergency_action.triggered.connect(self._emergency_stop)
                    tools_menu.addAction(emergency_action)
                    
                    # Test Integration
                    test_action = QAction("üß™ Test Integration", self)
                    test_action.triggered.connect(self._test_integration)
                    tools_menu.addAction(test_action)
            
            except Exception as e:
                